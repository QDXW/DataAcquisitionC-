/**
 *本文件定义全局变量
 *
 */

#include "chip.h"
#include "GlobalVar.h"
#include "InEeprom.h"

#include "string.h"
#include "RealTime.h"
#include "Update.h"
#include "Memory.h"
#include "IEC104.h"

#include "Record.h"
//==============================================================================
/*
AB.CD.EF

A：表示软件版本类型，A-正式发布版，B-测试版
B：硬件版本号，1-数采A版 2-数采B版 3-户用数采 4-能源数采
CD：软件大版本，00-FF
EF：软件小版本，00-FF
*/
// 数采版本：
#define G_VER_TYPE  0xB3    // 测试版 + 数采B版本
#define G_VER_S1    0x10    // 软件大版本
#define G_VER_S2    0x09    // 软件小版本  小版本号最低位   最低位1:在A面；0:在B面
#define G_VER_S3    0x0001  // 软件内部版本
//==============================================================================
// 数采默认设备信息
#define DEFAULT_inquire      60                    // 查询南向间隔时间，5分钟=300秒 = 30000个10ms
#define DEFAULT_MODEL        "C8000"                // 默认型号
#define DEFAULT_NAME         "icleanlogger"         // 默认名称
#define DEFAULT_TYPE         "iCleanLogger-c1"      // 默认类型
#define DEFAULT_ESN          "CLB1705HZ010001RB"    // 数采ESN号
#define DEFAULT_port          12434                 // 默认连接端口
#define DEFAULT_domain        "\"221.12.173.94\""   // 默认服务器域名
#define DEFAULT_phonenum      "15600005678"         // 数采默认上报号码
#define DEFAULT_ADDR          1                     // 默认设备地址
#define DEFAULT_device_sum    0                     // 默认设备数量
#define DEFAULT_yx_sum        0                     // 默认遥信点总数
#define DEFAULT_yc_sum        0                     // 默认遥测点总数
#define DEFAULT_yk_sum        0                     // 默认遥控点总数
#define DEFAULT_sd_sum        0                     // 默认设点点总数
#define DEFAULT_dd_sum        0                     // 默认电度点总数
//==============================================================================
LOGGER_RUNNING_T           g_LoggerRun={0};
LOGGER_INF_T               g_LoggerInfo={0};
LOGGER_DEVICE_PROTOCOL_T   g_DeviceSouth={0};
LOGGER_DEVICE_ESN_T        g_DeviceEsn={0};

LOGGER_DEVICE_SOFT_T       g_DeviceSoft={0};
UPDATA_MARK_T              g_LoggerUpdate={0};
DT1000UPDATA_MARK_T        g_DT1000Updata={0};


LOGGER_MODBUS_REG_T        *g_pRegPoint[MAX_device]={0,0,0,0,0,0,0,0,0,0};

SOUTH_ALARM_T              *g_psSouthAlarm[MAX_device]={0,0,0,0,0,0,0,0,0,0};
SOUTH_ALARM_T              *g_psSouthAlarmCopy[MAX_device]={0,0,0,0,0,0,0,0,0,0};
LOGGER_ALARM_T             g_LoggerAlarm={0};

//uint16_t g_PerSetTableResq = 0;             //点表编码
uint8_t SouthSwich=0;
uint8_t SdContinuousAddr = 0;     //遥调设点地址是否连续性


//==============================================================================
// 获取版本号
uint8_t GetVerType(void)
{
    return G_VER_TYPE;
}
uint8_t GetVerS1(void)
{
    return G_VER_S1;
}
uint8_t GetVerS2(void)
{
    return G_VER_S2;
}
uint16_t GetVerS3(void)
{
    return G_VER_S3;
}

//==============================================================================
//==============================================================================


/****************************************************************************
* 名    称：SetDefInfo()
* 功    能：初始化为默认数据。
* 入口参数：无
* 出口参数：存储成功返回存储字节数，失败返回0
* 范    例: 无
****************************************************************************/
void SetLoggerDefInfo(void)
{
    memset(g_LoggerInfo.esn,0,20);
    strncpy(g_LoggerInfo.esn,DEFAULT_ESN,17);      // ESN号
    strncpy(g_LoggerInfo.name,DEFAULT_NAME,20);    // 名称，使用ESN号作为默认名称
    strncpy(g_LoggerInfo.model,DEFAULT_MODEL,20);  // 型号
    strncpy(g_LoggerInfo.type,DEFAULT_TYPE,20);    // 类型

    g_LoggerInfo.server_port = DEFAULT_port;   // 服务器端口

    strncpy(g_LoggerInfo.phonenum,DEFAULT_phonenum,11);    // 上报手机号码

    memset(g_LoggerInfo.server_domain,0,30);
    strcpy(g_LoggerInfo.server_domain,DEFAULT_domain); // 服务器域名  strncpy(g_LoggerInfo.server_domain,DEFAULT_domain,17); // 服务器域名
    g_LoggerInfo.ADDR = DEFAULT_ADDR;// 数采地址

    g_LoggerInfo.IP[0] = 0;
    g_LoggerInfo.IP[1] = 0;
    g_LoggerInfo.IP[2] = 0;
    g_LoggerInfo.IP[3] = 0;
    g_LoggerInfo.inquire_interval_time = DEFAULT_inquire;  //查询南向间隔时间，5分钟=30000个10毫秒
}


/****************************************************************************
* 名    称：Save_eep_data()
* 功    能：存储内部EEPROM数据。
* 入口参数：
*           t         读存储的数据类型 1：Logger_inf；2：Device_south；3：Device_esn；4：Logger_updata

* 出口参数：存储成功返回存储字节数，失败返回0
* 范    例: 无
****************************************************************************/
uint16_t ReadEepData(uint8_t t)
{
    uint16_t result;
    uint8_t  i;
    uint8_t  space;
    uint32_t eep_addr;
    switch(t)
    {
    case EEP_LOGGER_INF:
        result = EepReadData(EEP_LOGGER_INF_HEAD,(uint8_t *)&g_LoggerInfo,sizeof(g_LoggerInfo),&g_LoggerInfo.CRC);// 数采读取
        break;

    case EEP_DEVICE_SOUTH:
        for(i=0;i<MAX_device;i++)
        {
            g_DeviceSouth.device_inf[i].addr = 0;
        }
        result = EepReadData(EEP_LOGGER_DEVICE_INF_HEAD,(uint8_t *)&g_DeviceSouth,sizeof(g_DeviceSouth),&g_DeviceSouth.CRC);// 设备信息和点表信息读取
        break;

    case EEP_DEVICE_ESN:
        result = EepReadData(EEP_LOGGER_DEVICE_ESN_HEAD,(uint8_t *)&g_DeviceEsn,sizeof(LOGGER_DEVICE_ESN_T),&g_DeviceEsn.CRC);// 设备ESN信息读取
        break;
    case EEP_DEVICE_SOFT:
        result = EepReadData(EEP_LOGGER_DEVICE_SOFT_HEAD,(uint8_t *)&g_DeviceSoft,sizeof(LOGGER_DEVICE_SOFT_T),&g_DeviceSoft.CRC);// 设备ESN信息存储
        break;

    case EEP_UPDATA:
        result = EepReadData(EEP_LOGGER_UPDATA_HEAD,(uint8_t *)&g_LoggerUpdate,sizeof(UPDATA_MARK_T),&g_LoggerUpdate.CRC);// 升级信息读取
        break;

    case EEP_ALARM:
        result = EepReadData(EEP_ALARM_HEAD,(uint8_t *)&g_LoggerAlarm.dev_lost,sizeof(g_LoggerAlarm),NULL);

        g_LoggerRun.err      = g_LoggerAlarm.log_alarm;
        g_LoggerRun.err_lost = g_LoggerAlarm.dev_lost;

        eep_addr = EEP_ALARM_HEAD + sizeof(g_LoggerAlarm);
        for(i=0; i<MAX_device&&i<g_DeviceSouth.device_sum; i++)
        {
            space = g_DeviceSouth.protocol[g_DeviceSouth.device_inf[i].rel_num].alarm_sum * sizeof(SOUTH_ALARM_T);
            if(space)
            {
                /*if(NULL!=g_psSouthAlarm[i])
                {
                    g_psSouthAlarm[i] = WMemFree(g_psSouthAlarm[i]);
                }
                if(NULL!=g_psSouthAlarmCopy[i])
                {
                    g_psSouthAlarmCopy[i] = WMemFree(g_psSouthAlarmCopy[i]);
                }*/

                g_psSouthAlarm[i] = (SOUTH_ALARM_T*)WMemMalloc(g_psSouthAlarm[i],space);   // 申请空间
                g_psSouthAlarmCopy[i] = (SOUTH_ALARM_T*)WMemMalloc(g_psSouthAlarmCopy[i],space);   // 申请空间

                if(NULL!=g_psSouthAlarm[i] && NULL!=g_psSouthAlarmCopy[i])
                {
                    result = EepReadData(eep_addr,(uint8_t *)&g_psSouthAlarm[i][0],space,NULL);
                    result = EepReadData(eep_addr,(uint8_t *)&g_psSouthAlarmCopy[i][0],space,NULL);
                    eep_addr += space;
                }
                else
                {
                    DEBUGOUT("告警点表空间失败-%d\r\n",i);
                }
            }
        }
        break;

   case EEP_DT1000_UPDATA:
        result = EepReadData(EEP_DT1000_UPDATA_HEAD,(uint8_t *)&g_DT1000Updata,sizeof(DT1000UPDATA_MARK_T),&g_DT1000Updata.CRC);// 设备ESN信息存储
        break;
    }

    return result;
}
/****************************************************************************
* 名    称：SaveEepData()
* 功    能：存储内部EEPROM数据。
* 入口参数：
*           t         存储的数据类型 1：Logger_inf；2：Device_south；3：Device_esn；4：Logger_updata

* 出口参数：存储成功返回存储字节数，失败返回0
* 范    例: 无
****************************************************************************/
uint16_t  SaveEepData(uint8_t t)
{
    uint16_t result;
    uint8_t  i;
    uint8_t  space;
    uint32_t eep_addr;

    switch(t)
    {
    case EEP_LOGGER_INF:
        result = EepSavedata(EEP_LOGGER_INF_HEAD,(uint8_t *)&g_LoggerInfo,sizeof(g_LoggerInfo),&g_LoggerInfo.CRC);// 存储
        break;

    case EEP_DEVICE_SOUTH:
        result = EepSavedata(EEP_LOGGER_DEVICE_INF_HEAD,(uint8_t *)&g_DeviceSouth,sizeof(g_DeviceSouth),&g_DeviceSouth.CRC);// 设备信息和点表信息存储
        break;

    case EEP_DEVICE_ESN:
        result = EepSavedata(EEP_LOGGER_DEVICE_ESN_HEAD,(uint8_t *)&g_DeviceEsn,sizeof(LOGGER_DEVICE_ESN_T),&g_DeviceEsn.CRC);// 设备ESN信息存储
        break;

    case EEP_UPDATA:
        result = EepSavedata(EEP_LOGGER_UPDATA_HEAD,(uint8_t *)&g_LoggerUpdate,sizeof(UPDATA_MARK_T),&g_LoggerUpdate.CRC);// 升级信息存储
        break;

    case EEP_ALARM:
        result = EepSavedata(EEP_ALARM_HEAD,(uint8_t *)&g_LoggerAlarm.dev_lost,sizeof(g_LoggerAlarm),NULL);
        eep_addr = EEP_ALARM_HEAD + sizeof(g_LoggerAlarm);
        for(i=0;i<MAX_device&&i<g_DeviceSouth.device_sum;i++)
        {
            space = g_DeviceSouth.protocol[g_DeviceSouth.device_inf[i].rel_num].alarm_sum * sizeof(SOUTH_ALARM_T);
            if(space)
            {
                if(NULL!=g_psSouthAlarm[i])
                {
                    result = EepSavedata(eep_addr,(uint8_t *)&g_psSouthAlarm[i][0],space,NULL);
                    eep_addr += space;
                }
            }
        }
        break;

    case EEP_DEVICE_SOFT:
        result = EepSavedata(EEP_LOGGER_DEVICE_SOFT_HEAD,(uint8_t *)&g_DeviceSoft,sizeof(LOGGER_DEVICE_SOFT_T),&g_DeviceSoft.CRC);// 设备ESN信息存储
        break;

    case EEP_DT1000_UPDATA:
        result = EepSavedata(EEP_DT1000_UPDATA_HEAD,(uint8_t *)&g_DT1000Updata,sizeof(DT1000UPDATA_MARK_T),&g_DT1000Updata.CRC);// 设备ESN信息存储
        break;

    }

    return result;
}
/****************************************************************************
* 名    称：AllReset()
* 功    能：恢复出厂设置。
* 入口参数：
*           uSave     1:存储    0:不存储

* 出口参数：存储成功返回存储字节数，失败返回0
* 范    例: 无
****************************************************************************/
void AllReset(uint8_t uSave)
{
    uint8_t i;

    g_DeviceSouth.device_sum = 0x00;
    g_DeviceSouth.yx_sum     = 0x00;
    g_DeviceSouth.yc_sum     = 0x00;
    g_DeviceSouth.yk_sum     = 0x00;
    g_DeviceSouth.sd_sum     = 0x00;
    g_DeviceSouth.dd_sum     = 0x00;


    for(i=0; i<MAX_device; i++)
    {
        g_DeviceSouth.device_inf[i].addr = 0;
        g_DeviceSouth.device_inf[i].rel_num = 0;
        g_DeviceSouth.device_inf[i].protocol_num = 0;
        g_DeviceSouth.device_inf[i].baud_rate = 3;    //1:2400；2:4800；3:9600；4:19200；5:38400；6:115200
        g_DeviceSouth.device_inf[i].protocol_type = 2;
        g_DeviceSouth.device_inf[i].big_little_endian = BIG_ENDIAN;
        g_DeviceSouth.device_inf[i].reserve = 0;
        g_DeviceSouth.device_inf[i].yx_start_addr = 0;
        g_DeviceSouth.device_inf[i].yc_start_addr = 0;
        g_DeviceSouth.device_inf[i].yk_start_addr = 0;
        g_DeviceSouth.device_inf[i].sd_start_addr = 0;
        g_DeviceSouth.device_inf[i].dd_start_addr = 0;

        g_DeviceSouth.protocol[i].protocol_num = 0;
        g_DeviceSouth.protocol[i].protocol_type = 2;
        g_DeviceSouth.protocol[i].alarm_sum = 0;
        g_DeviceSouth.protocol[i].reserve2 = 0;
        g_DeviceSouth.protocol[i].mess_point_sum = 0;
        g_DeviceSouth.protocol[i].flash_addr = 0;

        //---------------------------------------------------
        memset(g_DeviceEsn.cDeviceEsn[i],0,20);
		memset(&g_DeviceEsn.uEsnMark[i],0,1);
		memset(g_DeviceSoft.cDeviceSoft[i],0,17);
        //---------------------------------------------------
        // 释放告警点空间

        g_psSouthAlarm[i] = WMemFree(g_psSouthAlarm[i]);

        g_psSouthAlarmCopy[i] = WMemFree(g_psSouthAlarmCopy[i]);

        //---------------------------------------------------
        // 释放点表数组空间

        g_pRegPoint[i] = WMemFree(g_pRegPoint[i]);

    }

    //---------------------------------------------------
    g_LoggerAlarm.dev_lost  = 0x00;
    g_LoggerRun.err_lost    = 0x00;
    g_LoggerAlarm.log_alarm = 0x00;
    //---------------------------------------------------

    if(uSave)
    {
        SaveEepData(EEP_DEVICE_ESN);
        SaveEepData(EEP_DEVICE_SOFT);
        SaveEepData(EEP_DEVICE_SOUTH);
        SaveEepData(EEP_ALARM);
    }


    // 释放IEC104数据空间

    IEC104_DATA_YX = WMemFree(IEC104_DATA_YX);

    IEC104_DATA_YC = WMemFree(IEC104_DATA_YC);

    IEC104_DATA_YK = WMemFree(IEC104_DATA_YK);

    IEC104_DATA_SD = WMemFree(IEC104_DATA_SD);

    IEC104_DATA_DD = WMemFree(IEC104_DATA_DD);


    RecordInit(1);   // 历史数据存储重置
    //SaveLogInit(1);  //日志存储重置

    if(COLLECT_NULL!=g_sIecRun.collect)
    {
        g_sIecRun.collect = COLLECT_END;      // // 总召结束
    }

    if(COLLECT_NULL!=g_sIecRun.dd_collect)
    {
        g_sIecRun.dd_collect = COLLECT_DD_END;   // // 总召结束
    }
    if(COLLECT_NULL!=g_sIecRun.subcollect)
    {
        g_sIecRun.subcollect = SUBCOLLECT_END;
    }

    ReportCtrlClear(0xFF);


    g_LoggerRun.run_status = RUNNING_EMPTY;
}


/****************************************************************************
* 名    称：Reboot()
* 功    能：复位。
* 入口参数：
*

* 出口参数：无
* 范    例: 无
****************************************************************************/

void Reboot(void)
{
    // reset the mcu
    __DSB();  // Ensure all outstanding memory accesses included   buffered write are completed before reset
    SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |  SCB_AIRCR_SYSRESETREQ_Msk);
    __DSB();                   // Ensure completion of memory access
    
    for(;;)                    // wait until reset
    {
        __NOP();
    }
}
