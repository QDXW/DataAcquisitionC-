#include "chip.h"
//#include "board.h"

#include "All_Config.h"


//#include "pwm.h"
#include "KEY_SCAN.h"
#include "UART.h"
#include "SPI.h"
#include "GPIO.h"
#include "InEEPROM.h"
#include "WatchDog.h"
#include "InTIMER.h"
//#include "Angle.h"
#include "Compute.h"
#include "Global_var.h"
#include "Updata.h"
#include "CRC16.h"
#include "RS485_Slave.h"
#include "UART0_process.h"
#include "RealTime.h"
#include "Logic.h"
//#include "ADC.h"
//#include "Moto_ctrl.h"
#include "SWITCH_SCAN.h"

#include "Data_Flash.h"

#include "MODBUS_ctrl_box.h"

#include "GPS.h"

uint8_t inst1[10] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
uint8_t Updata_start=0;
uint8_t TENms=0;  // 10毫秒
uint8_t TENms_count=0; // 10毫秒计数

void Data_Init(void);
uint8_t Crystal_oscillator_Init(void);
void Chip_SetupIrcClocking2(void);
/*static void NVIC_SetVectorTable(uint32_t NVIC_VectTab,uint32_t Offset)
{
    // Check the parameters
    assert(IS_NVIC_VECTTAB(NVIC_VectTab));
    assert(IS_NVIC_OFFSET(Offset));

    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
}
*/


// LED等和按键IO口初始化
void Realy_Init(void)
{
    GPIO_SetDir(1, 0,Output);   // Relay1
    GPIO_SetDir(1,16,Output);   // Relay2
    GPIO_SetDir(1, 9,Output);   // Relay3
    GPIO_SetDir(1,14,Output);   // Relay4
}

//-------------------------------------------------------------------------------------------------
#define VTOR_OFFSET         (0x00006000)
void ReAllocateNVIC(void)
{
    /*__disable_irq();
    NVIC_SetVTOR(VTOR_OFFSET);
    __enable_irq();*/

    uint32_t* src,*dst;
    int32_t size;

    __disable_irq();
    // copy vector table
    src = (uint32_t*)VTOR_OFFSET;
    dst = (uint32_t*)0x10000000;
    size = 192;

    while(size > 0)
    {
        *dst++ = *src++;
        size -= 4;
    }
     LPC_SYSCTL->SYSMEMREMAP = 0x1;    /*LPC_SYSCON remap to internal RAM */
    //__enable_irq();

}


//-------------------------------------------------------------------------------------------------
int main(void)
{
    //int16_t ADC_result;
    uint8_t more_than_1s=0;
    uint8_t readbytes;
    //NVIC_SetVectorTable(0, 0x28000);
    //memcpy((void*)0x10000000, (void*)0x00028000, 192); //VECTOR_SIZE
    //SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SRAM);

    __disable_irq();

    // 偏移中断向量表，复制到RAM
    //ReAllocateNVIC();

    Chip_GPIO_Init(LPC_GPIO);
    Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_IOCON);  // 必须，初始化外部晶振前运行，不然不能分配外部晶振引脚Chip_GPIO_Init(LPC_GPIO);

    LED_KEY_IO_Init();

    SWITCH_IO_Init();

    // 晶振初始化
    //if(0==Crystal_oscillator_Init())  // 外部晶振初始化失败
    {
        //LED3(ON);
        Chip_SetupIrcClocking2();  // 使用内部晶振
    }

    SystemCoreClockUpdate();

    SysTick_Config(SystemCoreClock/100);   // SysTick interrupt @ 100 Hz = 10 msec



    //Chip_GPIO_SetValue(LPC_GPIO_PORT,2,0xff);

    //SPI_Init(SPI0);
    //InTIMER_Init();
    //PWM_Init(PWM01,10);
    RealTime_Init();     // 时钟初始化，IIC初始化

    UARTn_Init(uart0,115200);    // 串口0初始化 RS232
    UARTn_Init(uart1,9600);      // 串口1初始化 Zigbee
    UARTn_Init(uart2,9600);      // 串口2初始化 RS485
    UARTn_Init(uart3,4800);      // 串口3初始化 RS232
    UARTn_Init(uart4,9600);      // 串口4初始化 RS485
    //UARTn_Init(uart4,115200);

    //WatchDog_Init();// 初始化看门狗
GPIO_SetDir(2,8,Output);   // 外部看门狗
FEED_DOG();     // 喂狗

GPIO_SetDir(1,31,Output);   // Zigbee
GPIO_SetBit(1,31,Low);

GPIO_SetDir(1,0,Output);   // Relay1
GPIO_SetBit(1,0,Low);

    Data_Init();   // 数据初始化

    RS485_Slave_Init();// 需要放在数据初始化之后

    Ctrl_box_cmd_init(); // 查询控制盒初始化

    DEBUGOUT("\r\n-->%02d-%02d-%02d %02d:%02d:%02d\r\n",Date_Time.Year,Date_Time.Month,Date_Time.Date,Date_Time.Hour,Date_Time.Minute,Date_Time.Second);
    DEBUGOUT("-->APP start!\r\n");

    //优先级可以是0 1 2 3四个数，0的优先级最大，3的优先级最小
    NVIC_SetPriority(USART1_4_IRQn, 0);
    NVIC_SetPriority(USART0_IRQn,1);
    NVIC_SetPriority(SysTick_IRQn,2);

    FEED_DOG();     // 喂狗

    //Data_Flash_Init();

    //Data_Flash_Read_ID();

    __enable_irq();
    while(1)
    {
        if(Timer_mark.BIT.ten_main)  // 10毫秒
        {
            //FEED_DOG();  // 喂看门狗

            Timer_mark.BIT.ten_main = 0;


            if(0==G_run.updata)  // 进入升级模式后不读角度
            {

            }

            TENms_count++;

            if(TENms_count>=100) // 1秒钟
            {
                TENms_count = 0;
                more_than_1s=1;

                if(0==G_run.updata)  // 进入升级模式后不读时间
                {
                    LED1_twinkle();  // LED1闪烁
                    RealTime_Get();  // 每秒读一次时钟芯片
                }
                else
                {
                    LED1_twinkle();  // LED1闪烁
                    LED2_twinkle();  // LED2闪烁
                    LED3_twinkle();  // LED3闪烁
                }
            }
        }


        if(0==G_run.updata) // 正常运行
        {

            UART0_PROCESS();       // 串口0处理
            RS485_Slave_Process(); // 串口1,RS485通讯处理
            Ctrl_box_com();        // 与控制盒通讯

            GPS_Read();

        }
        else // 进入升级模式
        {
            if(0==Updata())
            {
                G_run.updata = 0;
            }
        }

/*
        if(SwitchUp & S01)
        {
            SwitchUp &= ~S01;
            DEBUGOUT("S1 Up\r\n");
        }
        if(SwitchUp & S02)
        {
            SwitchUp &= ~S02;
            DEBUGOUT("S2 Up\r\n");
        }
        if(SwitchUp & S03)
        {
            SwitchUp &= ~S03;
            DEBUGOUT("S3 Up\r\n");
        }
        if(SwitchUp & S04)
        {
            SwitchUp &= ~S04;
            DEBUGOUT("S4 Up\r\n");
        }
        if(SwitchUp & S05)
        {
            SwitchUp &= ~S05;
            DEBUGOUT("S5 Up\r\n");
        }
        if(SwitchUp & S06)
        {
            SwitchUp &= ~S06;
            DEBUGOUT("S6 Up\r\n");
        }
        if(SwitchUp & S07)
        {
            SwitchUp &= ~S07;
            DEBUGOUT("S7 Up\r\n");
        }
        if(SwitchUp & S08)
        {
            SwitchUp &= ~S08;
            DEBUGOUT("S8 Up\r\n");
        }
        if(SwitchUp & S09)
        {
            SwitchUp &= ~S09;
            DEBUGOUT("S9 Up\r\n");
        }
        if(SwitchUp & S10)
        {
            SwitchUp &= ~S10;
            DEBUGOUT("S10 Up\r\n");
        }
        if(SwitchUp & S11)
        {
            SwitchUp &= ~S11;
            DEBUGOUT("S11 Up\r\n");
        }
        if(SwitchUp & S12)
        {
            SwitchUp &= ~S12;
            DEBUGOUT("S12 Up\r\n");
        }
        if(SwitchUp & S13)
        {
            SwitchUp &= ~S13;
            DEBUGOUT("S13 Up\r\n");
        }
        if(SwitchUp & S14)
        {
            SwitchUp &= ~S14;
            DEBUGOUT("S14 Up\r\n");
        }
        if(SwitchUp & S15)
        {
            SwitchUp &= ~S15;
            DEBUGOUT("S15 Up\r\n");
        }
        if(SwitchUp & S16)
        {
            SwitchUp &= ~S16;
            DEBUGOUT("S16 Up\r\n");
        }
*/


        if(KeyOn & Key_SCARM)
        {
            LED2(ON);
        }
        else
        {
            LED2(OF);
        }

        if(KeyOn & Key4)
        {
            LED3(ON);
            GPIO_SetBit(1,0,High);
        }
        else
        {
            LED3(OF);
            GPIO_SetBit(1,0,Low);
        }



        //*
        if(KeyUp & Key1)
        {
            KeyUp &= ~Key1;

            //G_run.angle_now = Angle_get(); // 获取现在的角度
            DEBUGOUT("Key1 Up\r\n");

            //DEBUGOUT("%02d-%02d-%02d %02d:%02d:%02d\r\n",Date_Time.Year,Date_Time.Month,Date_Time.Date,Date_Time.Hour,Date_Time.Minute,Date_Time.Second);

            readbytes = UARTn_Read(uart1,inst1,5);
        }
        if(KeyUp & Key2)
        {
            KeyUp &= ~Key2;
            //-----------------------

            DEBUGOUT("Key2 Up\r\n");

            //Angle_Init();   // 角度传感器初始化
            //FeedDog();
            //InEEPROM_Write(InEEPROM_ADD_START,inst1,5);
            UARTn_Send(uart1,inst1,readbytes);//readbytes
        }
        if(KeyUp & Key3)
        {
            KeyUp &= ~Key3;
            DEBUGOUT("Key3 Up\r\n");
        }
        if(KeyUp & Key4)
        {
            KeyUp &= ~Key4;
            DEBUGOUT("Key4 Up\r\n");
            //UARTn_Send(uart3,inst1,5);

            Date_Time.Year     = GPS_inf.Year;
            Date_Time.Month    = GPS_inf.Month;
            Date_Time.Date     = GPS_inf.Date;
            Date_Time.Hour     = GPS_inf.Hour;
            Date_Time.Minute   = GPS_inf.Minute;
            Date_Time.Second   = GPS_inf.Second;

            RealTime_Set();// 设置到时钟芯片
        }
        //*/
    }

    //return 0;
}
//-------------------------------------------------------------------------------------------------
void SysTick_Handler(void)
{
    //L_timer_10ms = 1;//L_timer++;
    //TENms = 1;
    Timer_mark.markall = 0xFF;
    KeyScan();
    SwitchScan();
    UART_STATE_CHECK();  // 串口状态检查
}
//-------------------------------------------------------------------------------------------------
void Data_Init(void)
{
    uint8_t  follow_state;  // 跟踪状态
    uint16_t delay;
    //InEEPROM_Read(InEEPROM_ADD_START,(uint8_t*)&G_status.longitude,sizeof(G_status));

    //crc = CRC16 ((uint8_t*)&G_status.longitude,sizeof(G_status)-2);
    for (delay = 0; delay < 1000; delay++)
    {
        __NOP();
    }
    if(0==Read_data()) // 读取EEPROM里的数据错误，用默认参数
    {
        G_status.longitude = DEFAULT_longitude;  // 经度
        G_status.latitude  = DEFAULT_latitude;   // 纬度
        G_status.length    = DEFAULT_length;     // 组件长度
        G_status.gap       = DEFAULT_gap;        // 组件间距
        G_status.ADDR      = DEFAULT_ADDR;       // 设备地址
        G_status.remote[0] = HAND;               // 手动
        G_status.CRC       = 0;                  // CRC校验
    }

    RealTime_Get();


}


uint8_t Crystal_oscillator_Init(void)
{
	volatile int i;
/*#if defined(USE_ROM_API)
	uint32_t cmd[4], resp[2];
#endif
*/
    for (i = 0; i < 250; i++) {}
    Chip_IOCON_PinMuxSet(LPC_IOCON, 2, 0, (IOCON_FUNC1 | IOCON_MODE_INACT | IOCON_ADMODE_EN)); // 外部晶振引脚
    Chip_IOCON_PinMuxSet(LPC_IOCON, 2, 1, (IOCON_FUNC1 | IOCON_MODE_INACT | IOCON_ADMODE_EN)); // 外部晶振引脚
    for (i = 0; i < 250; i++) {}

	/* Powerup main oscillator */
	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_SYSOSC_PD);

    //Chip_SYSCTL_PowerDown(SYSCTL_POWERDOWN_IRC_PD);

    Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_IRC);  // 主时钟设置为内部IRC

	/* Wait for at least 580uS for osc to stabilize */
	for (i = 0; i < 2500; i++) {}

    //Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_IRC);  // 主时钟设置为内部IRC
    Chip_SYSCTL_PowerDown(SYSCTL_POWERDOWN_SYSPLL_PD);     // 关闭PLL

	/* Set system PLL input to main oscillator */
	Chip_Clock_SetSystemPLLSource(SYSCTL_PLLCLKSRC_MAINOSC);

    while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x01));     //等待更新完成

	/* Setup FLASH access to 2 clocks */
	Chip_FMC_SetFLASHAccess(FLASHTIM_2CLK_CPU);

/*#if defined(USE_ROM_API)
	// Use ROM API for setting up PLL
	cmd[0] = Chip_Clock_GetMainOscRate() / 1000;	// in KHz
	cmd[1] = 48000000 / 1000;	// 48MHz system clock rate
	cmd[2] = CPU_FREQ_EQU;
	cmd[3] = 48000000 / 10000;	// Timeout
	LPC_PWRD_API->set_pll(cmd, resp);

	// Dead loop on fail
	while (resp[0] != PLL_CMD_SUCCESS) {}
#else*/
	// Power down PLL to change the PLL divider ratio
	Chip_SYSCTL_PowerDown(SYSCTL_POWERDOWN_SYSPLL_PD);

	/* Setup PLL for main oscillator rate (FCLKIN = 12MHz) * 4 = 48MHz
	   MSEL = 3 (this is pre-decremented), PSEL = 1 (for P = 2)
	   FCLKOUT = FCLKIN * (MSEL + 1) = 12MHz * 4 = 48MHz
	   FCCO = FCLKOUT * 2 * P = 48MHz * 2 * 2 = 192MHz (within FCCO range) */
	Chip_Clock_SetupSystemPLL(3, 1);

	// Powerup system PLL
	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_SYSPLL_PD);

	// Wait for PLL to lock
    i = 0;
	while (!Chip_Clock_IsSystemPLLLocked())
    {
        i++;
        if(i>1000)
        {
            return 0;
        }
    }

	// Set system clock divider to 1
	Chip_Clock_SetSysClockDiv(1);

	/* Set main clock source to the system PLL. This will drive 48MHz
	   for the main clock and 48MHz for the system clock */
	Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_PLLOUT);

    return 1;
//#endif
}

void Chip_SetupIrcClocking2(void)
{
    volatile int i;

	/* Turn on the IRC by clearing the power down bit */
	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_IRC_PD);

    Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_IRC);  // 主时钟设置为内部IRC

    for (i = 0; i < 250; i++) {}

	/* Select the PLL input in the IRC */
	Chip_Clock_SetSystemPLLSource(SYSCTL_PLLCLKSRC_IRC);

	/* Setup FLASH access */
	Chip_FMC_SetFLASHAccess(FLASHTIM_2CLK_CPU);


	/* Power down PLL to change the PLL divider ratio */
	Chip_SYSCTL_PowerDown(SYSCTL_POWERDOWN_SYSPLL_PD);

	/* Configure the PLL M and P dividers */
	/* Setup PLL for main oscillator rate (FCLKIN = 12MHz) * 4 = 48MHz
	   MSEL = 3 (this is pre-decremented), PSEL = 1 (for P = 2)
	   FCLKOUT = FCLKIN * (MSEL + 1) = 12MHz * 4 = 48MHz
	   FCCO = FCLKOUT * 2 * P = 48MHz * 2 * 2 = 192MHz (within FCCO range) */
	Chip_Clock_SetupSystemPLL(3, 1);

	/* Turn on the PLL by clearing the power down bit */
	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_SYSPLL_PD);

	/* Wait for PLL to lock */
	while (!Chip_Clock_IsSystemPLLLocked()) {}

	/* Set system clock divider to 1 */
	Chip_Clock_SetSysClockDiv(1);

	/* Set main clock source to the system PLL. This will drive 24MHz
	   for the main clock and 24MHz for the system clock */
	Chip_Clock_SetMainClockSource(SYSCTL_MAINCLKSRC_PLLOUT);

}

